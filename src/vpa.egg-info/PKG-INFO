Metadata-Version: 2.4
Name: vpa
Version: 0.1.0
Summary: VPA - Virtual Personal Assistant
Author-email: Karl Botha <karl@example.com>
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6.0
Requires-Dist: click>=8.0.0
Requires-Dist: pyttsx3>=2.99
Requires-Dist: edge-tts>=7.0.0
Requires-Dist: pygame>=2.6.0
Requires-Dist: psutil>=7.0.0
Requires-Dist: aiohttp>=3.12.0
Requires-Dist: cryptography>=45.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: pytest-mock>=3.0; extra == "dev"
Requires-Dist: black>=23.0; extra == "dev"
Requires-Dist: flake8>=6.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Provides-Extra: voice
Requires-Dist: pyttsx3>=2.90; extra == "voice"
Provides-Extra: llm
Requires-Dist: ollama>=0.1.0; extra == "llm"
Provides-Extra: gui
Requires-Dist: customtkinter>=5.2.0; extra == "gui"
Provides-Extra: security
Requires-Dist: cryptography>=41.0.0; extra == "security"

# VPA - Virtual Personal Assistant

## Project Vision

The VPA (Virtual Personal Assistant) project is creating an intelligent, extensible, and user-friendly virtual assistant with natural language interaction and RAG (Retrieval-Augmented Generation) capabilities.

### Core Objectives
- **Intelligent Conversation Management**: Complete conversation persistence with encryption
- **RAG-Ready Architecture**: Foundation prepared for retrieval-augmented generation
- **Extensible Plugin System**: Event-driven architecture with comprehensive fault tolerance  
- **Privacy-First**: Enterprise-grade encryption with GDPR/CCPA compliance
- **Cross-Platform**: Python-based with multi-OS support

## Current Status (July 15, 2025)

### âœ… COMPLETED FEATURES
- **VPA Base Application**: Complete conversation management system (M01-M08)
- **Database Layer**: SQLite with Fernet encryption (96% test coverage)
- **Plugin System**: Event-driven architecture with error boundaries (100% coverage)
- **User Profiles**: Rich user data with preferences and metadata
- **Data Export**: Complete data portability and privacy compliance
- **Search Functionality**: Conversation search ready for RAG enhancement
- **Health Monitoring**: Real-time system metrics and fault tolerance

### ðŸ”„ IN PROGRESS
- **Authentication System (M09)**: OAuth2/passwordless authentication implementation
- **RAG Integration Preparation**: Architecture alignment and planning complete

### ðŸ“‹ NEXT PHASES
- **RAG Integration**: Retrieval-augmented generation with document storage
- **LLM Integration**: Language model connectivity with response synthesis
- **Enhanced UI**: Improved user interface for RAG interactions

## Getting Started

### Prerequisites
- Python 3.9 or higher
- Git
- Virtual environment tool (venv, conda, etc.)

### Installation
```bash
# Clone the repository
git clone git@github.com:KarlBotha/VPA.git
cd VPA

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt
```

### Development Setup
```bash
# Install development dependencies
pip install -r requirements-dev.txt

# Run tests (251/252 passing)
python -m pytest tests/

# Run VPA Base Application demo
python test_base_app_integration.py

# Show configuration
python -m src.vpa config-show

# Get help
python -m src.vpa --help
```

## Test Coverage Status
- **Overall System**: 57% coverage (948/2188 lines covered)
- **Core Database**: 96% coverage (360/374 lines)
- **VPA Base App**: 78% coverage (159/194 lines)  
- **Plugin System**: 100% coverage
- **Test Success Rate**: 99.6% (251/252 tests passing)

## Project Structure
```
VPA/
â”œâ”€â”€ src/                    # Source code
â”‚   â””â”€â”€ vpa/               # Main VPA package
â”‚       â”œâ”€â”€ core/          # Core application components
â”‚       â”œâ”€â”€ plugins/       # Plugin system
â”‚       â”œâ”€â”€ services/      # Service components  
â”‚       â”œâ”€â”€ cli/           # Command line interface
â”‚       â””â”€â”€ gui/           # GUI components (future)
â”œâ”€â”€ config/                # Configuration files
â”œâ”€â”€ tests/                 # Test files
â”œâ”€â”€ docs/                  # Documentation
â”œâ”€â”€ requirements.txt       # Python dependencies
â”œâ”€â”€ pyproject.toml        # Modern Python packaging
â”œâ”€â”€ README.md             # This file
â”œâ”€â”€ CONTRIBUTING.md       # Contribution guidelines
â””â”€â”€ .gitignore           # Git ignore rules
```

## Documentation
- [Project Plan](docs/PLAN.md) - Detailed roadmap and development plan
- [System Rules](docs/SYSTEM_RULES.md) - Architecture and coding standards
- [Contributing](CONTRIBUTING.md) - How to contribute to the project

## License
This project is licensed under the MIT License - see the LICENSE file for details.

## Contact
For questions and support, please open an issue on GitHub.
