[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vpa"
version = "1.0.0"
description = "Event-driven Virtual Personal Assistant with plugin architecture"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Karl Botha", email = "karl@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]
requires-python = ">=3.9"
dependencies = [
    "psutil>=5.9.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "pyttsx3>=2.90",
    "edge-tts>=7.0.0",
    "pygame>=2.6.0",
    "aiohttp>=3.12.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
]
gui = [
    "customtkinter>=5.2.0",
]
llm = [
    "ollama>=0.1.0",
]
all = [
    "vpa[dev,gui,llm]",
]

[project.scripts]
vpa = "vpa.main:cli"

[project.urls]
Homepage = "https://github.com/KarlBotha/VPA"
Repository = "https://github.com/KarlBotha/VPA"
Issues = "https://github.com/KarlBotha/VPA/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=src/vpa",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
]
testpaths = ["tests/audio", "tests/core"]
norecursedirs = ["archive*", "legacy*", "docs*", "build", "dist", ".git", ".venv", "env", ".tox", "pycache", "referencedocuments"]
ignore = [
    "archive/",
    "archive_optimization/", 
    "legacy_archive_cleanup/",
    "referencedocuments/",
    "*_test.py",
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: marks tests as async (deselect with '-m \"not asyncio\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gui: marks tests as GUI tests (deselect with '-m \"not gui\"')",
    "voice: marks tests as voice system tests (deselect with '-m \"not voice\"')",
    "enterprise: enterprise-only tests",
    "advanced_llm: non-core LLM tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/vpa"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = "\\.pyi?$"
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
  | archive
  | archive_optimization
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyttsx3.*",
    "edge_tts.*",
    "pygame.*",
    "win32*",
    "comtypes.*",
]
ignore_missing_imports = true
